function[Vmask]=maskVol(V_orig,lower_surf,orig_surf,upper_surf,step)
[wx,wy,wz]=size(V_orig);

%step=thickness*2;
dx=floor((wx-1)/step);
dy=floor((wy-1)/step);

Vres=V_orig;
Vmask=0*Vres;
for x=1:dx
    for y=1:dy
          face_b=makeFace(x,y,step,lower_surf);
          face_o=makeFace(x,y,step,surf);
          face_t=makeFace(x,y,step,upper_surf);
          prisms=getPrismoids(face_b,face_t,face_o);
          if(~isempty(prisms))
              el_mask=mask_prisms(V_orig,prisms);
              Vmask(btl_l(1):bbr_u(1),btl_l(2):bbr_u(2),btl_l(3):bbr_u(3))=el_mask;
          end;
        
%         [ptl_l,pbl_l,ptr_l,pbr_l]=make3DPoints(x,y,step,lower_surf);
%         [ptl_u,pbl_u,ptr_u,pbr_u]=make3DPoints(x,y,step,upper_surf);
%         %volume boundary.
%         btl_l=min([ptl_l;pbl_l;ptr_l;pbr_l;ptl_u;pbl_u;ptr_u;pbr_u]);
%         bbr_u=max([ptl_l;pbl_l;ptr_l;pbr_l;ptl_u;pbl_u;ptr_u;pbr_u]);
%         btl_l=atb(floor(btl_l),[wx,wy,wz],3);
%         bbr_u=atb(ceil(bbr_u),[wx,wy,wz],3);
%          
%         if(ptl_u(3)>1 || pbl_u(3)>1 || ptr_u(3)>1 || pbr_u(3)>1 || ...
%                 ptl_u(3)>1 || pbl_u(3)>1 || ptr_u(3)>1 || pbr_u(3)>1)    
%             el_mask=mask_element(V_orig, ptl_l,pbl_l,ptr_l,...
%                 pbr_l,ptl_u,pbl_u,ptr_u,pbr_u, btl_l, bbr_u);
%     	    Vmask(btl_l(1):bbr_u(1),btl_l(2):bbr_u(2),btl_l(3):bbr_u(3))=el_mask;
%         end;
    end;
end;
    
function [tl, bl, tr, br]=make3DPoints(x,y,step,surf)
lx=(x-1)*step+1;
rx=lx+step;
ty=(y-1)*step+1;
by=ty+step;
tl=[lx,ty,surf(3,x,y)];
bl=[lx,by,surf(3,x,y+1)];
tr=[rx,ty,surf(3,x+1,y)];
br=[rx,by,surf(3,x+1,y+1)];

function[Vmask]=mask_prisms(V_orig,prisms,bbr_u,btl_l)
tetra_new(1:3)=prism_partition(prisms(1));
if(size(prisms,2)>1) 
    tetra_new(4:6)=prism_partition(prisms(2));
end;
mx=bbr_u-btl_l+[1,1,1];
Vmask=0*(V_orig(btl_l(1):bbr_u(1),btl_l(2):bbr_u(2),btl_l(3):bbr_u(3)));



function [Vmask]=mask_element(V_orig, ptl_l,pbl_l,ptr_l,...
                  pbr_l,ptl_u,pbl_u,ptr_u,pbr_u, btl_l, bbr_u)
              
tetra_new=tetrahedron_partition...
    (ptl_l,pbl_l,ptr_l,pbr_l,ptl_u,pbl_u,ptr_u,pbr_u);
mx=bbr_u-btl_l+[1,1,1];
Vmask=0*(V_orig(btl_l(1):bbr_u(1),btl_l(2):bbr_u(2),btl_l(3):bbr_u(3)));

%main cycle.
for z=1:mx(3)
    for y=1:mx(2)
        for x=1:mx(1)
            pt=[x,y,z]+btl_l-[1,1,1];                 
            t=get_containing_tetrahedron(pt,tetra_new);
            if(t>0)
                Vmask(x,y,z)=255;
            else
                Vmask(x,y,z)=0;
            end;            
        end;
    end;
end;



function[t]=get_containing_tetrahedron(x,tetra)
t=-1;
for i=1:6
    if(is_inside_tetrahedron(x,tetra(i))>0) t=i;return;end;
end;

function[tetra]=tetrahedron_partition...
    (ptl_l,pbl_l,ptr_l,pbr_l,ptl_u,pbl_u,ptr_u,pbr_u)
%partition begins
%front prismoid partition begins
%front tetrahedron
tetra(1)=tetrahedron(pbl_l,ptl_l,ptr_l,ptl_u);
%left tetrahedron
tetra(2)=tetrahedron(ptr_u,ptl_u,pbl_u,pbl_l);
%right tetrahedron
tetra(3)=tetrahedron(ptl_u,ptr_u,ptr_l,pbl_l);
%front prismoid partition ends
%rear prisomoid partition begins
%left tetrahedron
tetra(4)=tetrahedron(pbr_l,pbl_l,ptr_l,pbl_u);
%right tetrahedron
tetra(5)=tetrahedron(pbr_l,ptr_l,ptr_u,pbl_u);
%front(back) tetrahedron
tetra(6)=tetrahedron(pbl_u,pbr_u,ptr_u,pbr_l);
%rear prisomid partition ends
%partition ends

function[coefs]=plane_eq(x1,x2,x3)
cx=(x1(2)-x2(2))*(x3(3)-x2(3))-(x1(3)-x2(3))*(x3(2)-x2(2));
cy=(x1(3)-x2(3))*(x3(1)-x2(1))-(x1(1)-x2(1))*(x3(3)-x2(3));
cz=(x1(1)-x2(1))*(x3(2)-x2(2))-(x1(2)-x2(2))*(x3(1)-x2(1));
c0=(-x2(2)*x3(1)+x2(1)*x3(2))*x1(3)+(x2(3)*x3(1)-x2(1)*x3(3))*x1(2)+...
    (-x2(3)*x3(2)+x2(2)*x3(3))*x1(1);
coefs=-[cx,cy,cz,c0];
mx=max(coefs);
if(mx>0) coefs=coefs/mx; end;


function[res]=tetrahedron(x1,x2,x3,x4)
coefs=zeros(4,4);
base=plane_eq(x1,x2,x3);
left=plane_eq(x2,x4,x3);
right=plane_eq(x4,x2,x1);
rear=plane_eq(x1,x3,x4);
coefs(:,1)=base;
coefs(:,2)=left;
coefs(:,3)=right;
coefs(:,4)=rear;
res.faces=coefs;
res.origin=x2;
v1=x1-x2;v2=x3-x2;v3=x4-x2;
n1=norm(v1);n2=norm(v2);n3=norm(v3);

%if(n1>0)v1=v1/n1;end;
%if(n2>0)v2=v2/n2;end;
% if(n3>0)v3-v3/n3;end;
res.v1=v1;res.v2=v2;res.v3=v3;
res.n1=n1;res.n2=n2;res.n3=n3;

if(n1>0 && n2>0 && n3>0)
    res.deg=0;
else res.deg=1;
end;
%useful, dot parallel products.
dp1=left(1)*v1(1)+left(2)*v1(2)+left(3)*v1(3);
dp2=right(1)*v2(1)+right(2)*v2(2)+right(3)*v2(3);
dp3=base(1)*v3(1)+base(2)*v3(2)+base(3)*v3(3);
res.dp=[dp1,dp2,dp3];
n=zeros(3,3);
n(:,1)=n1;
n(:,2)=n2;
n(:,3)=n3;
res.n=n;
vx=[v1(1),v2(1),v3(1)];
vy=[v1(2),v2(2),v3(2)];
vz=[v1(3),v2(3),v3(3)];
cx=[coefs(1,2),coefs(1,3),coefs(1,1)];
cy=[coefs(2,2),coefs(2,3),coefs(2,1)];
cz=[coefs(3,2),coefs(3,3),coefs(3,1)];
res.vx=vx;res.vy=vy;res.vz=vz;
res.cx=cx;res.cy=cy;res.cz=cz;

A=zeros(3,4,3);
if(dp1==0) dp1=1;end;
if(dp2==0) dp2=1;end;
if(dp3==0) dp3=1;end;
dp=[dp1,dp2,dp3];

A(1,1,:)=((vx.*cx)./dp)';
A(1,2,:)=((vx.*cy)./dp)';
A(1,3,:)=((vx.*cz)./dp)';
A(1,4,:)=((vy.*x2(1).*cy+x2(1).*cz.*vz-vx.*cz.*x2(3)-vx.*x2(2).*cy)./dp)';
A(2,1,:)=((vy.*cx)./dp)';
A(2,2,:)=((vy.*cy)./dp)';
A(2,3,:)=((vy.*cz)./dp)';
A(2,4,:)=((-cx.*vy.*x2(1)+cx.*vx.*x2(2)+cz.*vz.*x2(2)-cz.*vy.*x2(3))./dp)';
A(3,1,:)=((vz.*cx)./dp)';
A(3,2,:)=((vz.*cy)./dp)';
A(3,3,:)=((vz.*cz)./dp)';
A(3,4,:)=((-vz.*cx.*x2(1)-vz.*x2(1).*cy+x2(3).*cx.*vx+vy.*x2(3).*cy)./dp)';
res.A=A;

function[res]=ev_plane_eq(x,eq)
res=eq(1)*x(1)+eq(2)*x(2)+eq(3)*x(3)+eq(4);

function[res]=is_inside_tetrahedron(x,tetr)
dscr=-1e-10;
if(tetr.deg~=0) res=0; return; end;
res=1;
for i=1:4
    if(ev_plane_eq(x,tetr.faces(:,i))<dscr)
        res=0; return;
    end;
end;

function[xr]=atb(x,sz,nDim)
xr=x;
for i=1:nDim
    if(x(i)<1) xr(i)=1; end;
    if(x(i)>sz(i)) xr(i)=sz(i);end;
end;
